# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  isoko-backend

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

 # This is a Lambda function config associated with the source code: get-search-businesses.js
  postSearchResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/business/post-search-results.postSearchResultsHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP post method to get all businesses that match search criteria.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /searchBusiness
            Method: POST
            RestApiId: !Ref IsokoBackendApi

  postListBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/business/post-list-business.postListBusinessHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP post method to allow a user to list a new business.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /business
            Method: POST
            RestApiId: !Ref IsokoBackendApi
  
  getBusinessPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/business/get-business-page.getBusinessPageHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP get method to get business page with details and reviews  for specific businessId.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /business/{businessId}
            Method: GET
            RestApiId: !Ref IsokoBackendApi

  putEditBusinessPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/business/put-edit-business-page.putEditBusinessPageHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP put method that allows only the business owner to modify the details of their business page.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /business/{businessId}
            Method: PUT
            RestApiId: !Ref IsokoBackendApi

  delBusinessPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/business/del-business-page.delBusinessPageHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP del method that deletes a business page.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /business/{businessId}
            Method: DELETE
            RestApiId: !Ref IsokoBackendApi

  getUserObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/user/get-user-object.getUserObjectHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP get method that returns a user object based off of the userSub specified in the request.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/{userSub}
            Method: GET
            RestApiId: !Ref IsokoBackendApi

  cognitoPostConfirmationTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/triggers/cognito-post-confirmation.cognitoPostConfirmationHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Creates a new user in dynamodb after they confirm their email.
      Policies:
        - DynamoDBWritePolicy:
            TableName: Users


  putUserObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/user/put-user-object.putUserObjectHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP put method that allows the user object specified to be updated according to the request body.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/{userSub}
            Method: PUT
            RestApiId: !Ref IsokoBackendApi

  getUserReviewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/user/get-user-reviews.getUserReviewsHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP get method that lists all of the reviews a user has authored.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/{userSub}/reviews
            Method: GET
            RestApiId: !Ref IsokoBackendApi

  delUserReviewFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/review/del-user-review.delUserReviewHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP del method that deletes the specified review.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /review/{reviewId}
            Method: DELETE
            RestApiId: !Ref IsokoBackendApi

  postReviewFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/review/post-review.postReviewHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP post method that creates a new review for the specified business.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /business/{businessId}/review
            Method: POST
            RestApiId: !Ref IsokoBackendApi
            Auth:
              Authorizer: CognitoAuthorizer

  postReviewFlagFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/review/post-review-flag.postReviewFlagHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP post method that creates a new flag for the specified review.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /review/{reviewId}/flag
            Method: POST
            RestApiId: !Ref IsokoBackendApi

    
  postBusinessFlagFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/business/post-business-flag.postBusinessFlagHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP post method that creates a new flag for the specified business.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /business/{businessId}/flag
            Method: POST
            RestApiId: !Ref IsokoBackendApi

  getPhotoUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/photos/get-photo-url.getPhotoUrlHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          UploadBucket: !Ref S3Bucket  
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3Bucket
        - Statement:
          - Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/'
            Action:
              - s3:putObjectAcl
      Description: Includes a HTTP GET method that generates unique URL to post photo to S3.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /photos/{photoId}
            Method: GET
            RestApiId: !Ref IsokoBackendApi

  getFlagFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/flag/get-flag.getFlagHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP get method that lists the flag information for both business and reviews.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /flag
            Method: GET
            RestApiId: !Ref IsokoBackendApi

  getBusinessFlagsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/flag/get-business-flags.getBusinessFlagsHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP get method  that lists all the flags for the specified business.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /flag/business/{businessId}
            Method: GET
            RestApiId: !Ref IsokoBackendApi

  getReviewFlagsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/flag/get-review-flags.getReviewFlagsHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Includes a HTTP get method that lists all the flags for the specified review.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /flag/review/{reviewId}
            Method: GET
            RestApiId: !Ref IsokoBackendApi

  # Setup for the S3 service. 
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      BucketName: image-bucket-isoko
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"


  # Rest Api to use for Cognito authorization
  IsokoBackendApi:
    DependsOn: UserPool
    Type: AWS::Serverless::Api
    Properties:
      Name: isoko-backend-api
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt "UserPool.Arn"
      Cors:
        AllowMethods: "'POST, PUT, GET, DELETE, OPTIONS'"
        AllowOrigin: "'*'"
        AllowHeaders: "'content-type'"
        AllowCredentials: "'*'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        DEFAULT_5xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  Users:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Users
      PrimaryKey:
        Name: pk
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5


  SearchResults:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SearchResults
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: pk
        - KeyType: RANGE
          AttributeName: sk
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  Flags:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Flags
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: pk
        - KeyType: RANGE
          AttributeName: sk
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

    
  Businesses:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Businesses
      KeySchema:
        - KeyType: HASH
          AttributeName: pk
        - KeyType: RANGE
          AttributeName: sk
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: reviewAuthor
          AttributeType: S
        - AttributeName: ts
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: reviews-index
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: reviewAuthor
              KeyType: HASH
            - AttributeName: ts
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  UserPool: 
    Type: AWS::Cognito::UserPool
    Properties: 
      AccountRecoverySetting: 
        RecoveryMechanisms: 
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      EmailConfiguration: 
        EmailSendingAccount: COGNITO_DEFAULT 
      MfaConfiguration: "OFF"
      Policies: 
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema: 
        - AttributeDataType: String
          Mutable: true
          Name: name
          Required: true
        - AttributeDataType: String
          Mutable: true
          Name: family_name
          Required: true
        - AttributeDataType: String
          Mutable: false
          Name: email
          Required: true 
      UsernameAttributes: 
        - email
      UserPoolName: Isoko Users
      VerificationMessageTemplate: 
          DefaultEmailOption: CONFIRM_WITH_LINK
      
  UserPoolClient: 
    Type: AWS::Cognito::UserPoolClient
    Properties:
      CallbackURLs:
        - http://localhost:3000/
        - http://localhost:3000/search
      DefaultRedirectURI: http://localhost:3000/
      LogoutURLs: 
        - http://localhost:3000/
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
      ClientName: Isoko Web App
      GenerateSecret: false

  UserPoolGroup: 
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      Description: Users who are able to access moderator dashboard
      GroupName: Moderators
      Precedence: 0
      UserPoolId: !Ref UserPool

  IsokoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: isoko
      UserPoolId: !Ref UserPool

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: "UserPool::Id"
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: "UserPoolClient::Id"
